{"version":3,"sources":["components/Options.jsx","components/Survey.jsx","App.js","index.js"],"names":["Options","text","colors","clicked","className","style","backgroundColor","value","onClick","e","target","Survey","Count","items","axios","get","then","response","data","console","log","catch","error","useState","username","question1","question2","userData","setuserData","clickedDataQ1","clickedData","clickedDataQ2","type","placeholder","onChange","href","display","id","addItem","method","url","alert","App","count","setCount","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.bb1d0eb9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Options.css\";\nfunction Options({ text, colors, clicked }) {\n  return (\n    <button\n      className=\"Option_main\"\n      style={{ backgroundColor: colors }}\n      value={text}\n      onClick={(e) => {\n        clicked(e.target.value);\n      }}\n    >\n      {text}\n    </button>\n  );\n}\n\nexport default Options;\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Options from \"./Options\";\nimport \"./Survey.css\";\n\nconst Survey = ({ Count }) => {\n  var items = [];\n  axios\n    .get(\"https://seq-backend-postgres.herokuapp.com/pushNewUserInSleepApp\")\n    .then(function (response) {\n      // console.log(response);\n      items = [...response.data];\n      console.log(items);\n    })\n    .catch((error) => console.error(error));\n\n  const addItem = (addItem) => {\n    console.log(addItem);\n    axios({\n      method: \"POST\",\n      url: \"https://seq-backend-postgres.herokuapp.com/pushNewUserInSleepApp\",\n      data: addItem\n    })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  const [userData, setuserData] = useState({\n    username: \"\",\n    question1: \"\",\n    question2: \"\"\n  });\n  const clickedDataQ1 = (clickedData) => {\n    setuserData({\n      ...userData,\n      question1: clickedData\n    });\n  };\n  const clickedDataQ2 = (clickedData) => {\n    setuserData({\n      ...userData,\n      question2: clickedData\n    });\n  };\n  return (\n    <>\n      <div className=\"main__div\">\n        <div className=\"page1\">\n          <div className=\"innerPage\">\n            <h1>\n              Hey! I'm <span>wysa</span>\n            </h1>\n            <p>\n              Our conversations are private & anonymous, so there is no\n              login.Just choose a nickname and we're good to go\n            </p>\n            <input\n              type=\"text\"\n              placeholder=\"Choose a nickname...\"\n              value={userData.username}\n              onChange={(e) => {\n                setuserData({\n                  ...userData,\n                  username: e.target.value\n                });\n              }}\n            />\n\n            <p>\n              By continuing, I confirm I am 13 or older and accept the{\" \"}\n              <a href=\"/\">Terms of Service</a> and{\" \"}\n              <a href=\"/\">Privacy Policy</a>\n            </p>\n          </div>\n        </div>\n        <div className=\"page2\" style={{ display: Count === 1 && \"inline\" }}>\n          <div className=\"innerPage\">\n            <h2>\n              Let's say in a few weeks, you're sleeping well. What would change?\n            </h2>\n            <p>Select the change you would like to see.</p>\n            <Options\n              text={\"I would go to sleep easily\"}\n              colors={\"#3BACB6\"}\n              clicked={clickedDataQ1}\n            />\n            <Options\n              text={\"I would sleep through the night\"}\n              colors={\"#3A5BA0\"}\n              clicked={clickedDataQ1}\n            />\n            <Options\n              text={\"I'd wake up on time, refreshed\"}\n              colors={\"#590696\"}\n              clicked={clickedDataQ1}\n            />\n            <br />\n          </div>\n        </div>\n        <div className=\"page3\" style={{ display: Count === 2 && \"inline\" }}>\n          <div className=\"innerPage\">\n            <h2>\n              That's a great goal. How long have you been struggling with your\n              sleep\n            </h2>\n            <Options\n              text={\"Less than 2 weeks\"}\n              colors={\"#3BACB6\"}\n              clicked={clickedDataQ2}\n            />\n            <Options\n              text={\"2 to 8 Weeks\"}\n              colors={\"#3A5BA0\"}\n              clicked={clickedDataQ2}\n            />\n            <Options\n              text={\"More than 8 weeks\"}\n              colors={\"#590696\"}\n              clicked={clickedDataQ2}\n            />\n          </div>\n          <button\n            id=\"next\"\n            onClick={() => {\n              if (userData.question1 !== \"\" && userData.question2 !== \"\") {\n                addItem(userData);\n                alert(\"Submitted successfully\");\n                setuserData({\n                  username: \"\",\n                  question1: \"\",\n                  question2: \"\"\n                });\n              } else {\n                alert(\"Please complete all questions\");\n              }\n            }}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Survey;\n","import React, { useState } from \"react\";\nimport Survey from \"./components/Survey\";\nimport \"./App.css\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"inner_div\">\n        {count !== 0 && (\n          <button\n            id=\"prev\"\n            onClick={() => {\n              if (count > 0) {\n                setCount(count - 1);\n              }\n            }}\n          >\n            Prev\n          </button>\n        )}\n        {count !== 2 && (\n          <button\n            id=\"next\"\n            onClick={() => {\n              if (count < 2) {\n                setCount(count + 1);\n              }\n            }}\n          >\n            Next\n          </button>\n        )}\n      </div>\n      <Survey Count={count} />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}